load("//rules_codecov/private:versions.bzl", "CODECOV_VERSIONS")
load("//rules_codecov/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")

CODECOV_BUILD_TMPL = """\
# Generated by rules_codecov/repositories.bzl
load("//rules_codecov:toolchain.bzl", "codecov_toolchain")

codecov_toolchain(
    name = "codecov_toolchain",
    codecov = "{binary}",
    version = "{version}"
)
"""

def _codecov_repo_impl(repository_ctx):
    platform = ""
    if repository_ctx.attr.platform.startswith("darwin_"):
        platform = "macos"
    else:
        platform = "DEFINEME"
    print(platform)
    url = "https://github.com/codecov/codecov-cli/releases/download/{version}/codecovcli_{platform}".format(
        version = repository_ctx.attr.codecov_version,
        platform = platform,
    )
    print(CODECOV_VERSIONS[repository_ctx.attr.codecov_version])
    print(platform)
    repository_ctx.download(
        url = url,
        integrity = CODECOV_VERSIONS[repository_ctx.attr.codecov_version][platform],
    )
    binary = "codecov-cli"
    repository_ctx.template(
        "launcher.sh",
        repository_ctx.attr._launcher_tpl,
        substitutions = {
            "{{CODECOV}}": binary,
        },
    )
    repository_ctx.file(
        "BUILD.bazel",
        CODECOV_BUILD_TMPL.format(
            binary = binary,
            version = repository_ctx.attr.codecov_version,
        ),
    )

codecov_repositories = repository_rule(
    _codecov_repo_impl,
    doc = "Fetch external tools needed for codecov toolchain",
    attrs = {
        "platform": attr.string(mandatory = True),
        "codecov_version": attr.string(mandatory = True),
        "_launcher_tpl": attr.label(default = "//rules_codecov/private/registry:codecov_launcher.sh.tpl"),
    },
)

# Wrapper macro around everything above, this is the primary API
def codecov_register_toolchains(name, codecov_version, register = True):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "container_linux_amd64" -
      this repository is lazily fetched when node is needed for that platform.
    - create a repository exposing toolchains for each platform like "container_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "container7"
        codecov_version: passed to each codecov_repositories call
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
    """
    codecov_toolchain_name = "{name}_codecov_toolchains".format(name = name)
    codecov_registry_toolchain_name = "{name}_codecov_registry_toolchains".format(name = name)
    zot_toolchain_name = "{name}_zot_toolchains".format(name = name)

    for platform in PLATFORMS.keys():
        codecov_repositories(
            name = "{name}_codecov_{platform}".format(name = name, platform = platform),
            platform = platform,
            codecov_version = codecov_version,
        )

        if register:
            native.register_toolchains("@{}//:{}_toolchain".format(codecov_toolchain_name, platform))
            native.register_toolchains("@{}//:{}_toolchain".format(codecov_registry_toolchain_name, platform))

    toolchains_repo(
        name = codecov_toolchain_name,
        toolchain_type = ":codecov_toolchain_type",
        # avoiding use of .format since {platform} is formatted by toolchains_repo for each platform.
        toolchain = "@%s_codecov_{platform}//:codecov_toolchain" % name,
    )

    toolchains_repo(
        name = codecov_registry_toolchain_name,
        toolchain_type = "@rules_codecov//codecov:registry_toolchain_type",
        # avoiding use of .format since {platform} is formatted by toolchains_repo for each platform.
        toolchain = "@%s_codecov_{platform}//:registry_toolchain" % name,
    )
